// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(QDbContext))]
    [Migration("20221104055307_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Models.AccessConfigsModels.AccessConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(-2);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ConfigKey")
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("ConfigKey");

                    b.Property<string>("ConfigValue")
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("ConfigValue");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("OrganizationId")
                        .HasColumnOrder(-1);

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("ParentId");

                    b.HasKey("Id");

                    b.ToTable("AccessConfigs");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ConfigKey = "03C_SETTINGS",
                            ConfigValue = "O3C Settings",
                            OrganizationId = 1L,
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 2L,
                            ConfigKey = "O3C_USERNAME",
                            ConfigValue = "",
                            OrganizationId = 1L,
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            ConfigKey = "O3C_PASSWORD",
                            ConfigValue = "",
                            OrganizationId = 1L,
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            ConfigKey = "O3C_DISPATCHER_URL",
                            ConfigValue = "",
                            OrganizationId = 1L,
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            ConfigKey = "O3C_PROTOCOL_TYPE",
                            ConfigValue = "",
                            OrganizationId = 1L,
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            ConfigKey = "O3C_SERVER",
                            ConfigValue = "",
                            OrganizationId = 1L,
                            ParentId = 1L
                        });
                });

            modelBuilder.Entity("Domain.Models.AccessLevelModels.AccessLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(-2);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("DATETIME");

                    b.Property<long>("DuringScheduleId")
                        .HasColumnType("bigint")
                        .HasColumnName("DuringScheduleId");

                    b.Property<long?>("ExceptScheduleId")
                        .HasColumnType("bigint")
                        .HasColumnName("ExceptScheduleId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(64)")
                        .HasColumnName("Name");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("OrganizationId")
                        .HasColumnOrder(-1);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(64)")
                        .HasColumnName("Token");

                    b.HasKey("Id");

                    b.HasIndex("DuringScheduleId");

                    b.HasIndex("ExceptScheduleId");

                    b.ToTable("AccessLevels");
                });

            modelBuilder.Entity("Domain.Models.AccessLevelModels.AccessLevelDoor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(-2);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AccessLevelId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccessLevelId");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("DATETIME");

                    b.Property<long>("DoorId")
                        .HasColumnType("bigint")
                        .HasColumnName("DoorId");

                    b.Property<long>("DuringScheduleId")
                        .HasColumnType("bigint")
                        .HasColumnName("DuringScheduleId");

                    b.Property<long?>("ExceptScheduleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("OrganizationId")
                        .HasColumnOrder(-1);

                    b.HasKey("Id");

                    b.HasIndex("AccessLevelId");

                    b.HasIndex("DoorId");

                    b.HasIndex("DuringScheduleId");

                    b.HasIndex("ExceptScheduleId");

                    b.ToTable("AccessLevelDoors");
                });

            modelBuilder.Entity("Domain.Models.AccessLevelModels.QUserAccessLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AccessLevelId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccessLevelId");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("OrganizationId")
                        .HasColumnOrder(-1);

                    b.Property<long>("QUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("QUserId");

                    b.HasKey("Id");

                    b.HasIndex("AccessLevelId");

                    b.HasIndex("QUserId");

                    b.ToTable("QUserAccessLevels");
                });

            modelBuilder.Entity("Domain.Models.Area", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("DATETIME");

                    b.Property<bool>("IsEntrance")
                        .HasColumnType("BIT")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(64)")
                        .HasColumnOrder(2);

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Domain.Models.CardFormatsModels.CardFormat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(-2);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("BitLength")
                        .HasColumnType("int")
                        .HasColumnName("BitLength");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(64)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit")
                        .HasColumnName("IsEnable");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(64)")
                        .HasColumnName("Name");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("OrganizationId")
                        .HasColumnOrder(-1);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("VARCHAR(64)")
                        .HasColumnName("Token");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId", "Name")
                        .IsUnique();

                    b.ToTable("CardFormats");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BitLength = 26,
                            Description = "Standard 26-bit Wiegand (H10301)",
                            IsEnable = true,
                            Name = "Wiegand 26-bit (H10301)",
                            OrganizationId = 1L,
                            Token = "iddataconf_wiegand_26bit_h10301"
                        },
                        new
                        {
                            Id = 2L,
                            BitLength = 32,
                            Description = "32-bit raw card data",
                            IsEnable = true,
                            Name = "32-bit Card Data",
                            OrganizationId = 1L,
                            Token = "iddataconf_32bit_card_data"
                        },
                        new
                        {
                            Id = 3L,
                            BitLength = 34,
                            Description = "Standard 34-bit Wiegand",
                            IsEnable = true,
                            Name = "Wiegand 34-bit",
                            OrganizationId = 1L,
                            Token = "iddataconf_wiegand_34bit"
                        },
                        new
                        {
                            Id = 4L,
                            BitLength = 37,
                            Description = "Standard 37-bit Wiegand (H10302)",
                            IsEnable = true,
                            Name = "Wiegand 37-bit (H10302)",
                            OrganizationId = 1L,
                            Token = "iddataconf_wiegand_37bit_h10302"
                        },
                        new
                        {
                            Id = 5L,
                            BitLength = 37,
                            Description = "Standard 37-bit Wiegand with facility code (H10304)",
                            IsEnable = true,
                            Name = "Wiegand 37-bit with facility code (H10304)",
                            OrganizationId = 1L,
                            Token = "iddataconf_wiegand_37bit_h10304"
                        },
                        new
                        {
                            Id = 6L,
                            BitLength = 80,
                            Description = "80-bit SmartIntego Card Data",
                            IsEnable = true,
                            Name = "80-bit SmartIntego",
                            OrganizationId = 1L,
                            Token = "iddataconf_smartintego_80bit"
                        },
                        new
                        {
                            Id = 7L,
                            BitLength = 56,
                            Description = "56-bit raw card data",
                            IsEnable = true,
                            Name = "56-bit Card Data",
                            OrganizationId = 1L,
                            Token = "iddataconf_56bit_card_data"
                        });
                });

            modelBuilder.Entity("Domain.Models.CardFormatsModels.CardFormatItems", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(-2);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CardFormatId")
                        .HasColumnType("bigint")
                        .HasColumnName("CardFormatId")
                        .HasColumnOrder(-1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Encoding")
                        .IsRequired()
                        .HasColumnType("VARCHAR(13)")
                        .HasColumnName("Encoding");

                    b.Property<string>("EncodingRange")
                        .IsRequired()
                        .HasColumnType("VARCHAR(21)")
                        .HasColumnName("EncodingRange");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(64)")
                        .HasColumnName("CardFormatItemName");

                    b.HasKey("Id");

                    b.HasIndex("CardFormatId");

                    b.ToTable("CardFormatsItems");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CardFormatId = 1L,
                            Encoding = "BinLE2Int",
                            EncodingRange = "1",
                            Name = "EvenParity"
                        },
                        new
                        {
                            Id = 2L,
                            CardFormatId = 1L,
                            Encoding = "BinLE2Int",
                            EncodingRange = "2-9",
                            Name = "FacilityCode"
                        },
                        new
                        {
                            Id = 3L,
                            CardFormatId = 1L,
                            Encoding = "BinLE2Int",
                            EncodingRange = "10-25",
                            Name = "CardNr"
                        },
                        new
                        {
                            Id = 4L,
                            CardFormatId = 1L,
                            Encoding = "BinLE2hex",
                            EncodingRange = "10-25",
                            Name = "CardNrHex"
                        },
                        new
                        {
                            Id = 5L,
                            CardFormatId = 1L,
                            Encoding = "BinLE2Int",
                            EncodingRange = "26",
                            Name = "OddParity"
                        },
                        new
                        {
                            Id = 6L,
                            CardFormatId = 2L,
                            Encoding = "BinLE2Int",
                            EncodingRange = "1-32",
                            Name = "CardNr"
                        },
                        new
                        {
                            Id = 7L,
                            CardFormatId = 2L,
                            Encoding = "BinLE2hex",
                            EncodingRange = "1-32",
                            Name = "CardNrHex"
                        },
                        new
                        {
                            Id = 8L,
                            CardFormatId = 3L,
                            Encoding = "BinLE2Int",
                            EncodingRange = "1",
                            Name = "EvenParity"
                        },
                        new
                        {
                            Id = 9L,
                            CardFormatId = 3L,
                            Encoding = "BinLE2Int",
                            EncodingRange = "2-17",
                            Name = "FacilityCode"
                        },
                        new
                        {
                            Id = 10L,
                            CardFormatId = 3L,
                            Encoding = "BinLE2Int",
                            EncodingRange = "18-33",
                            Name = "CardNr"
                        },
                        new
                        {
                            Id = 11L,
                            CardFormatId = 3L,
                            Encoding = "BinLE2hex",
                            EncodingRange = "18-33",
                            Name = "CardNrHex"
                        },
                        new
                        {
                            Id = 12L,
                            CardFormatId = 3L,
                            Encoding = "BinLE2Int",
                            EncodingRange = "34",
                            Name = "OddParity"
                        },
                        new
                        {
                            Id = 13L,
                            CardFormatId = 4L,
                            Encoding = "BinLE2Int",
                            EncodingRange = "1",
                            Name = "EvenParity"
                        },
                        new
                        {
                            Id = 14L,
                            CardFormatId = 4L,
                            Encoding = "BinLE2Int",
                            EncodingRange = "2-36",
                            Name = "CardNr"
                        },
                        new
                        {
                            Id = 15L,
                            CardFormatId = 4L,
                            Encoding = "BinLE2hex",
                            EncodingRange = "2-36",
                            Name = "CardNrHex"
                        },
                        new
                        {
                            Id = 16L,
                            CardFormatId = 4L,
                            Encoding = "BinLE2Int",
                            EncodingRange = "37",
                            Name = "OddParity"
                        },
                        new
                        {
                            Id = 17L,
                            CardFormatId = 5L,
                            Encoding = "BinLE2Int",
                            EncodingRange = "1",
                            Name = "EvenParity"
                        },
                        new
                        {
                            Id = 18L,
                            CardFormatId = 5L,
                            Encoding = "BinLE2Int",
                            EncodingRange = "2-17",
                            Name = "FacilityCode"
                        },
                        new
                        {
                            Id = 19L,
                            CardFormatId = 5L,
                            Encoding = "BinLE2Int",
                            EncodingRange = "18-36",
                            Name = "CardNr"
                        },
                        new
                        {
                            Id = 20L,
                            CardFormatId = 5L,
                            Encoding = "BinLE2hex",
                            EncodingRange = "18-36",
                            Name = "CardNrHex"
                        },
                        new
                        {
                            Id = 21L,
                            CardFormatId = 5L,
                            Encoding = "BinLE2Int",
                            EncodingRange = "37",
                            Name = "OddParity"
                        },
                        new
                        {
                            Id = 22L,
                            CardFormatId = 6L,
                            Encoding = "BinLE2Int",
                            EncodingRange = "17-80",
                            Name = "CardNr"
                        },
                        new
                        {
                            Id = 23L,
                            CardFormatId = 6L,
                            Encoding = "BinLE2hex",
                            EncodingRange = "17-80",
                            Name = "CardNrHex"
                        },
                        new
                        {
                            Id = 24L,
                            CardFormatId = 7L,
                            Encoding = "BinLE2Int",
                            EncodingRange = "1-56",
                            Name = "CardNr"
                        },
                        new
                        {
                            Id = 25L,
                            CardFormatId = 7L,
                            Encoding = "BinLE2hex",
                            EncodingRange = "1-56",
                            Name = "CardNrHex"
                        },
                        new
                        {
                            Id = 26L,
                            CardFormatId = 1L,
                            Encoding = "BinLE2Int",
                            EncodingRange = "1",
                            Name = "OddParity"
                        });
                });

            modelBuilder.Entity("Domain.Models.CardModels.Card", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(-2);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CardNumber")
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("CardNumber");

                    b.Property<string>("CardRaw")
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("CardRaw");

                    b.Property<string>("CardStatus")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Description")
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("Description");

                    b.Property<bool?>("DoNotExpire")
                        .HasColumnType("bit");

                    b.Property<int?>("FacilityCode")
                        .HasColumnType("int ")
                        .HasColumnName("FacilityCode");

                    b.Property<bool>("IsAdOverride")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAntiPassBack")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCard")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFacial")
                        .HasColumnType("bit");

                    b.Property<long?>("LastAccessAreaId")
                        .HasColumnType("bigint")
                        .HasColumnName("LastAccessAreaId");

                    b.Property<long?>("LastAccessDoorId")
                        .HasColumnType("bigint")
                        .HasColumnName("LastAccessDoorId");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("LpnNumber")
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("LpnNumber");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("OrganizationId")
                        .HasColumnOrder(-1);

                    b.Property<string>("Pin")
                        .HasColumnType("NVARCHAR(10)")
                        .HasColumnName("Pin");

                    b.Property<long?>("QUserId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("QUserId");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(64)")
                        .HasColumnName("Token");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidFrom");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidTo");

                    b.HasKey("Id");

                    b.HasIndex("QUserId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Domain.Models.ControllerModels.Controller", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(-2);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("DATETIME");

                    b.Property<bool>("IsDoor1Added")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDoor2Added")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOneDoor")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("MACAddress")
                        .IsRequired()
                        .HasColumnType("VARCHAR(17)")
                        .HasColumnName("MACAddress");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("VARCHAR(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(64)")
                        .HasColumnName("Name");

                    b.Property<string>("OAK")
                        .IsRequired()
                        .HasColumnType("VARCHAR(75)")
                        .HasColumnName("OAK");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("OrganizationId")
                        .HasColumnOrder(-1);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("Password");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("VARCHAR(25)")
                        .HasColumnName("State");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("VARCHAR(64)")
                        .HasColumnName("Token");

                    b.Property<string>("UUID")
                        .HasColumnType("VARCHAR(60)")
                        .HasColumnName("UUID");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId", "Name")
                        .IsUnique();

                    b.ToTable("Controllers");
                });

            modelBuilder.Entity("Domain.Models.ControllerModels.DoorModels.Door", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(-2);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ControllerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("DoorType")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(15)")
                        .HasColumnName("DoorType");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Lock")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(64)");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("OrganizationId")
                        .HasColumnOrder(-1);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(15)")
                        .HasColumnName("DoorState");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(64)")
                        .HasColumnName("Token");

                    b.HasKey("Id");

                    b.HasIndex("ControllerId");

                    b.ToTable("Doors");
                });

            modelBuilder.Entity("Domain.Models.ControllerModels.DoorModels.DoorAdvanceConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("AccessTime")
                        .HasColumnType("int")
                        .HasColumnName("AccessTime");

                    b.Property<string>("AntiPassbackEnforcementMode")
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("AntiPassbackEnforcementMode");

                    b.Property<int?>("AntiPassbackTimeout")
                        .HasColumnType("int")
                        .HasColumnName("AntiPassbackTimeout");

                    b.Property<string>("AntipassbackMode")
                        .HasColumnType("VARCHAR(15)")
                        .HasColumnName("AntipassbackMode");

                    b.Property<int>("BoltInTime")
                        .HasColumnType("int")
                        .HasColumnName("BoltInTime");

                    b.Property<int>("BoltOutTime")
                        .HasColumnType("int")
                        .HasColumnName("BoltOutTime");

                    b.Property<bool?>("CancelAccessTimeOnceDoorIsOpened")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("DATETIME");

                    b.Property<long>("DoorId")
                        .HasColumnType("bigint");

                    b.Property<string>("DoorMonitor")
                        .HasColumnType("NVARCHAR(30)")
                        .HasColumnName("DoorMonitor");

                    b.Property<long?>("DuringScheduleId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("EnableSupervisedInputs")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAntiPassback")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDoorMonitor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLockMonitor")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("LockMonitor")
                        .HasColumnType("int");

                    b.Property<int?>("LockType")
                        .HasColumnType("int");

                    b.Property<string>("LockWhenLocked")
                        .IsRequired()
                        .HasColumnType("VARCHAR(5)")
                        .HasColumnName("LockWhenLocked");

                    b.Property<string>("LockWhenUnlocked")
                        .IsRequired()
                        .HasColumnType("VARCHAR(5)")
                        .HasColumnName("LockWhenUnlocked");

                    b.Property<int>("LongAccessTime")
                        .HasColumnType("int")
                        .HasColumnName("LongAccessTime");

                    b.Property<int?>("OpenTooLongTime")
                        .HasColumnType("int")
                        .HasColumnName("OpenTooLongTime");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<int?>("PreAlarmTime")
                        .HasColumnType("int")
                        .HasColumnName("PreAlarmTime");

                    b.Property<string>("RelayStateLocked")
                        .IsRequired()
                        .HasColumnType("VARCHAR(8)")
                        .HasColumnName("RelayStateLocked");

                    b.Property<int?>("RelockTime")
                        .HasColumnType("int");

                    b.Property<long?>("UnlockScheduleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DoorId")
                        .IsUnique();

                    b.HasIndex("DuringScheduleId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UnlockScheduleId");

                    b.ToTable("DoorAdvanceConfigurations");
                });

            modelBuilder.Entity("Domain.Models.ControllerModels.DoorModels.ReaderModeds.ReaderIdentificationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(-2);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ControllerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("DATETIME");

                    b.Property<long?>("DuringScheduleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ExceptScheduleId")
                        .HasColumnType("bigint");

                    b.Property<string>("IdentificationType")
                        .IsRequired()
                        .HasColumnType("VARCHAR(25)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<long>("ReaderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DuringScheduleId");

                    b.HasIndex("ExceptScheduleId");

                    b.HasIndex("ReaderId");

                    b.ToTable("ReaderIdentificationTypes");
                });

            modelBuilder.Entity("Domain.Models.ControllerModels.DoorModels.ReaderModels.Reader", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(-2);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AreaInId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AreaOutId")
                        .HasColumnType("bigint");

                    b.Property<int>("BeeperType")
                        .HasColumnType("int");

                    b.Property<long>("ControllerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(60)")
                        .HasColumnName("Description");

                    b.Property<long>("DoorId")
                        .HasColumnType("bigint");

                    b.Property<int>("HeartbeatInterval")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnrollmentReader")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTimeAttendance")
                        .HasColumnType("bit");

                    b.Property<int>("LEDActiveLevel")
                        .HasColumnType("int");

                    b.Property<string>("LEDType")
                        .HasColumnType("VARCHAR(15)")
                        .HasColumnName("LEDType");

                    b.Property<string>("LPNCameraSN")
                        .HasColumnType("NVARCHAR(50)")
                        .HasColumnName("LPNCameraSN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(60)")
                        .HasColumnName("Location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(45)")
                        .HasColumnName("Name");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("OrganizationId")
                        .HasColumnOrder(-1);

                    b.Property<string>("Protocol")
                        .IsRequired()
                        .HasColumnType("VARCHAR(15)")
                        .HasColumnName("Protocol");

                    b.Property<string>("ReaderType")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("ReaderType");

                    b.Property<int>("TamperingType")
                        .HasColumnType("int");

                    b.Property<int>("Timeout")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(64)")
                        .HasColumnName("Token");

                    b.HasKey("Id");

                    b.HasIndex("AreaInId")
                        .IsUnique()
                        .HasFilter("[AreaInId] IS NOT NULL");

                    b.HasIndex("AreaOutId")
                        .IsUnique()
                        .HasFilter("[AreaOutId] IS NOT NULL");

                    b.HasIndex("DoorId");

                    b.ToTable("Readers");
                });

            modelBuilder.Entity("Domain.Models.ControllerModels.DoorModels.RexModels.Rex", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("DoorId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRexNotUnlockDoor")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("RexConnection")
                        .IsRequired()
                        .HasColumnType("VARCHAR(15)")
                        .HasColumnName("RexConnection");

                    b.Property<long>("RexDuringScheduleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RexExceptScheduleId")
                        .HasColumnType("bigint");

                    b.Property<string>("RexType")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("RexType");

                    b.HasKey("Id");

                    b.HasIndex("DoorId");

                    b.HasIndex("RexDuringScheduleId");

                    b.HasIndex("RexExceptScheduleId");

                    b.ToTable("Rexes");
                });

            modelBuilder.Entity("Domain.Models.DoorGroupModels.DoorGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(64)")
                        .HasColumnOrder(2);

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.ToTable("DoorGroups");
                });

            modelBuilder.Entity("Domain.Models.DoorGroupModels.DoorGroupDoors", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("DATETIME");

                    b.Property<long>("DoorGroupId")
                        .HasColumnType("BIGINT")
                        .HasColumnOrder(3);

                    b.Property<long>("DoorId")
                        .HasColumnType("BIGINT")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("DoorGroupId");

                    b.HasIndex("DoorId");

                    b.ToTable("DoorGroupDoors");
                });

            modelBuilder.Entity("Domain.Models.OutputSensorModel.ControllerIOPorts", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ControllerId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("IONumber")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(64)")
                        .HasColumnOrder(3);

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("PortType")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(7)")
                        .HasColumnOrder(4);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(18)")
                        .HasColumnOrder(5);

                    b.Property<string>("Status")
                        .HasColumnType("NVARCHAR(64)")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.HasIndex("ControllerId");

                    b.ToTable("ControllerIOPorts");
                });

            modelBuilder.Entity("Domain.Models.PrioritiesModels.Priority", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(-2);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ColorCode")
                        .HasColumnType("NVARCHAR(10)")
                        .HasColumnName("ColorCode");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("NVARCHAR(64)")
                        .HasColumnName("Name");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("OrganizationId")
                        .HasColumnOrder(-1);

                    b.Property<int?>("PriorityLevel")
                        .HasColumnType("int")
                        .HasColumnName("PriortyLevel");

                    b.HasKey("Id");

                    b.ToTable("Priorities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ColorCode = "#FF0000",
                            Name = "High",
                            OrganizationId = -1L
                        },
                        new
                        {
                            Id = 2L,
                            ColorCode = "#FFFF00",
                            Name = "Medium",
                            OrganizationId = -1L
                        },
                        new
                        {
                            Id = 3L,
                            ColorCode = "#00FF00",
                            Name = "Low",
                            OrganizationId = -1L
                        },
                        new
                        {
                            Id = 4L,
                            ColorCode = "#000000",
                            Name = "None",
                            OrganizationId = -1L
                        });
                });

            modelBuilder.Entity("Domain.Models.QUserModels.QUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(-2);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CompanyName")
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("CompanyName");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("VARCHAR(64)")
                        .HasColumnName("DepartmentName");

                    b.Property<string>("Email")
                        .HasColumnType("NVARCHAR(254)")
                        .HasColumnName("Email");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("NVARCHAR(40)")
                        .HasColumnName("EmployeeId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(64)")
                        .HasColumnName("FirstName");

                    b.Property<string>("Gender")
                        .HasColumnType("VARCHAR(6)")
                        .HasColumnName("Gender");

                    b.Property<bool?>("IsUnlockExtensionADA")
                        .HasColumnType("bit")
                        .HasColumnName("IsUnlockExtensionADA");

                    b.Property<string>("LastArea")
                        .HasColumnType("NVARCHAR(64)")
                        .HasColumnName("LastArea");

                    b.Property<string>("LastLocation")
                        .HasColumnType("NVARCHAR(64)")
                        .HasColumnName("LastLocation");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(64)")
                        .HasColumnName("LastName");

                    b.Property<DateTime?>("LastUse")
                        .HasColumnType("DateTime")
                        .HasColumnName("LastUse");

                    b.Property<string>("MiddleName")
                        .HasColumnType("NVARCHAR(64)")
                        .HasColumnName("MiddleName");

                    b.Property<string>("Nationality")
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("Nationality");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("OrganizationId")
                        .HasColumnOrder(-1);

                    b.Property<string>("Phone")
                        .HasColumnType("NVARCHAR(16)")
                        .HasColumnName("Phone");

                    b.Property<string>("QUserType")
                        .HasColumnType("VARCHAR(64)")
                        .HasColumnName("QUserType");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(64)")
                        .HasColumnName("Token");

                    b.HasKey("Id");

                    b.ToTable("QUser");
                });

            modelBuilder.Entity("Domain.Models.QUserModels.QUserFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(-2);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("VARBINARY(MAX)")
                        .HasColumnName("ImageData");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ImageName");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("OrganizationId")
                        .HasColumnOrder(-1);

                    b.Property<long>("QUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("QUserId");

                    b.HasKey("Id");

                    b.HasIndex("QUserId")
                        .IsUnique();

                    b.ToTable("QUserFiles");
                });

            modelBuilder.Entity("Domain.Models.ScheduleModels.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Definition")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Description")
                        .HasColumnType("NVARCHAR(128)");

                    b.Property<bool>("IsSubtraction")
                        .HasColumnType("BIT");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(64)")
                        .HasColumnOrder(2);

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(64)")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.ToTable("Schedules");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Always active (standard schedule)",
                            IsSubtraction = false,
                            Name = "Always",
                            OrganizationId = -1L,
                            Token = "standard_always"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Example office hours (9AM to 5PM)",
                            IsSubtraction = false,
                            Name = "Office Hours",
                            OrganizationId = -1L,
                            Token = "standard_office_hours"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Example weekend time incl. friday evening",
                            IsSubtraction = false,
                            Name = "Weekends",
                            OrganizationId = -1L,
                            Token = "standard_weekends"
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Example after hours (5PM to 9AM) incl. weekends",
                            IsSubtraction = false,
                            Name = "After Hours",
                            OrganizationId = -1L,
                            Token = "standard_after_hours"
                        });
                });

            modelBuilder.Entity("Domain.Models.ScheduleModels.ScheduleItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("EndBy")
                        .HasColumnType("DATETIME")
                        .HasColumnOrder(14);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("DATETIME")
                        .HasColumnOrder(13);

                    b.Property<string>("EndTime")
                        .HasColumnType("NVARCHAR(5)")
                        .HasColumnOrder(6);

                    b.Property<bool>("IsAllDay")
                        .HasColumnType("BIT")
                        .HasColumnOrder(8);

                    b.Property<bool>("IsEndBy")
                        .HasColumnType("BIT")
                        .HasColumnOrder(11);

                    b.Property<bool>("IsRecurrence")
                        .HasColumnType("BIT")
                        .HasColumnOrder(10);

                    b.Property<bool>("IsWeekly")
                        .HasColumnType("BIT")
                        .HasColumnOrder(9);

                    b.Property<string>("ItemDefinition")
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("RecurrenceDays")
                        .HasColumnType("NVARCHAR(40)")
                        .HasColumnOrder(7);

                    b.Property<long>("ScheduleId")
                        .HasColumnType("BIGINT")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("DATETIME")
                        .HasColumnOrder(12);

                    b.Property<string>("StartTime")
                        .HasColumnType("NVARCHAR(5)")
                        .HasColumnOrder(5);

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(64)")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleItems");
                });

            modelBuilder.Entity("Domain.Models.TimeZoneModels.ControllerDateTime", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(-2);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ControllerId")
                        .HasColumnType("bigint")
                        .HasColumnName("ControllerId");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("DHCP")
                        .HasColumnType("NVARCHAR(39)");

                    b.Property<string>("Date")
                        .HasColumnType("NVARCHAR(12)");

                    b.Property<bool>("DayLightSaving")
                        .HasColumnType("bit");

                    b.Property<string>("IPAddress")
                        .HasColumnType("NVARCHAR(39)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("DATETIME");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("OrganizationId")
                        .HasColumnOrder(-1);

                    b.Property<string>("SetMode")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(6)");

                    b.Property<string>("Time")
                        .HasColumnType("NVARCHAR(10)");

                    b.Property<string>("TimeZoneValue")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(60)");

                    b.HasKey("Id");

                    b.HasIndex("ControllerId")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.ToTable("ControllerDateTime");
                });

            modelBuilder.Entity("Domain.Models.AccessLevelModels.AccessLevel", b =>
                {
                    b.HasOne("Domain.Models.ScheduleModels.Schedule", "Schedule")
                        .WithMany("AccessLevelSchdeule")
                        .HasForeignKey("DuringScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Models.ScheduleModels.Schedule", "ExceptSchedule")
                        .WithMany("AccessLevelExceptSchdeule")
                        .HasForeignKey("ExceptScheduleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ExceptSchedule");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Domain.Models.AccessLevelModels.AccessLevelDoor", b =>
                {
                    b.HasOne("Domain.Models.AccessLevelModels.AccessLevel", "AccessLevel")
                        .WithMany("AccessLevelDoors")
                        .HasForeignKey("AccessLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.ControllerModels.DoorModels.Door", "Door")
                        .WithMany("AccessLevelDoors")
                        .HasForeignKey("DoorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.ScheduleModels.Schedule", "Schedule")
                        .WithMany("AccessLevelDoorSchdeule")
                        .HasForeignKey("DuringScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Models.ScheduleModels.Schedule", "ExceptSchedule")
                        .WithMany("AccessLevelDoorExceptSchdeule")
                        .HasForeignKey("ExceptScheduleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AccessLevel");

                    b.Navigation("Door");

                    b.Navigation("ExceptSchedule");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Domain.Models.AccessLevelModels.QUserAccessLevel", b =>
                {
                    b.HasOne("Domain.Models.AccessLevelModels.AccessLevel", "AccessLevel")
                        .WithMany()
                        .HasForeignKey("AccessLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.QUserModels.QUser", "QUser")
                        .WithMany("QUserAccessLevels")
                        .HasForeignKey("QUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessLevel");

                    b.Navigation("QUser");
                });

            modelBuilder.Entity("Domain.Models.CardFormatsModels.CardFormatItems", b =>
                {
                    b.HasOne("Domain.Models.CardFormatsModels.CardFormat", "CardFormat")
                        .WithMany("CardFormatItems")
                        .HasForeignKey("CardFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardFormat");
                });

            modelBuilder.Entity("Domain.Models.CardModels.Card", b =>
                {
                    b.HasOne("Domain.Models.QUserModels.QUser", "QUser")
                        .WithMany("Cards")
                        .HasForeignKey("QUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QUser");
                });

            modelBuilder.Entity("Domain.Models.ControllerModels.DoorModels.Door", b =>
                {
                    b.HasOne("Domain.Models.ControllerModels.Controller", "Controller")
                        .WithMany("Doors")
                        .HasForeignKey("ControllerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Controller");
                });

            modelBuilder.Entity("Domain.Models.ControllerModels.DoorModels.DoorAdvanceConfiguration", b =>
                {
                    b.HasOne("Domain.Models.ControllerModels.DoorModels.Door", "Door")
                        .WithOne("DoorAdvanceConfiguration")
                        .HasForeignKey("Domain.Models.ControllerModels.DoorModels.DoorAdvanceConfiguration", "DoorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.ScheduleModels.Schedule", "Schedule")
                        .WithOne("DoorAdvanceConfigurationForSchedule")
                        .HasForeignKey("Domain.Models.ControllerModels.DoorModels.DoorAdvanceConfiguration", "DuringScheduleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Models.ScheduleModels.Schedule", "UnlockSchedule")
                        .WithOne("DoorAdvanceConfigurationForUnlockSchedule")
                        .HasForeignKey("Domain.Models.ControllerModels.DoorModels.DoorAdvanceConfiguration", "UnlockScheduleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Door");

                    b.Navigation("Schedule");

                    b.Navigation("UnlockSchedule");
                });

            modelBuilder.Entity("Domain.Models.ControllerModels.DoorModels.ReaderModeds.ReaderIdentificationType", b =>
                {
                    b.HasOne("Domain.Models.ScheduleModels.Schedule", "Schedule")
                        .WithOne("ReaderIdentificationTypeSchedule")
                        .HasForeignKey("Domain.Models.ControllerModels.DoorModels.ReaderModeds.ReaderIdentificationType", "DuringScheduleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Models.ScheduleModels.Schedule", "ExceptSchedule")
                        .WithOne("ReaderIdentificationTypeExceptSchedule")
                        .HasForeignKey("Domain.Models.ControllerModels.DoorModels.ReaderModeds.ReaderIdentificationType", "ExceptScheduleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Models.ControllerModels.DoorModels.ReaderModels.Reader", "Reader")
                        .WithMany("ReaderIdentificationType")
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExceptSchedule");

                    b.Navigation("Reader");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Domain.Models.ControllerModels.DoorModels.ReaderModels.Reader", b =>
                {
                    b.HasOne("Domain.Models.Area", "AreaIn")
                        .WithOne("Reader_AreaIn")
                        .HasForeignKey("Domain.Models.ControllerModels.DoorModels.ReaderModels.Reader", "AreaInId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Models.Area", "AreaOut")
                        .WithOne("Reader_AreaOut")
                        .HasForeignKey("Domain.Models.ControllerModels.DoorModels.ReaderModels.Reader", "AreaOutId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Models.ControllerModels.DoorModels.Door", "Door")
                        .WithMany("Readers")
                        .HasForeignKey("DoorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AreaIn");

                    b.Navigation("AreaOut");

                    b.Navigation("Door");
                });

            modelBuilder.Entity("Domain.Models.ControllerModels.DoorModels.RexModels.Rex", b =>
                {
                    b.HasOne("Domain.Models.ControllerModels.DoorModels.Door", "Door")
                        .WithMany("Rexes")
                        .HasForeignKey("DoorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.ScheduleModels.Schedule", "RexDuringSchedule")
                        .WithOne("RexDuringSchedule")
                        .HasForeignKey("Domain.Models.ControllerModels.DoorModels.RexModels.Rex", "RexDuringScheduleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.ScheduleModels.Schedule", "RexExceptSchedule")
                        .WithOne("RexExceptSchedule")
                        .HasForeignKey("Domain.Models.ControllerModels.DoorModels.RexModels.Rex", "RexExceptScheduleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Door");

                    b.Navigation("RexDuringSchedule");

                    b.Navigation("RexExceptSchedule");
                });

            modelBuilder.Entity("Domain.Models.DoorGroupModels.DoorGroupDoors", b =>
                {
                    b.HasOne("Domain.Models.DoorGroupModels.DoorGroup", "DoorGroup")
                        .WithMany("DoorGroupDoors")
                        .HasForeignKey("DoorGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.ControllerModels.DoorModels.Door", "Door")
                        .WithMany("DoorGroupDoors")
                        .HasForeignKey("DoorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Door");

                    b.Navigation("DoorGroup");
                });

            modelBuilder.Entity("Domain.Models.OutputSensorModel.ControllerIOPorts", b =>
                {
                    b.HasOne("Domain.Models.ControllerModels.Controller", "Controller")
                        .WithMany("ControllerIOPorts")
                        .HasForeignKey("ControllerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Controller");
                });

            modelBuilder.Entity("Domain.Models.QUserModels.QUserFile", b =>
                {
                    b.HasOne("Domain.Models.QUserModels.QUser", "QUser")
                        .WithOne("QUserFiles")
                        .HasForeignKey("Domain.Models.QUserModels.QUserFile", "QUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QUser");
                });

            modelBuilder.Entity("Domain.Models.ScheduleModels.ScheduleItem", b =>
                {
                    b.HasOne("Domain.Models.ScheduleModels.Schedule", "Schedules")
                        .WithMany("ScheduleItems")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Domain.Models.TimeZoneModels.ControllerDateTime", b =>
                {
                    b.HasOne("Domain.Models.ControllerModels.Controller", "Controller")
                        .WithOne("ControllerDateTime")
                        .HasForeignKey("Domain.Models.TimeZoneModels.ControllerDateTime", "ControllerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Controller");
                });

            modelBuilder.Entity("Domain.Models.AccessLevelModels.AccessLevel", b =>
                {
                    b.Navigation("AccessLevelDoors");
                });

            modelBuilder.Entity("Domain.Models.Area", b =>
                {
                    b.Navigation("Reader_AreaIn")
                        .IsRequired();

                    b.Navigation("Reader_AreaOut")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.CardFormatsModels.CardFormat", b =>
                {
                    b.Navigation("CardFormatItems");
                });

            modelBuilder.Entity("Domain.Models.ControllerModels.Controller", b =>
                {
                    b.Navigation("ControllerDateTime")
                        .IsRequired();

                    b.Navigation("ControllerIOPorts");

                    b.Navigation("Doors");
                });

            modelBuilder.Entity("Domain.Models.ControllerModels.DoorModels.Door", b =>
                {
                    b.Navigation("AccessLevelDoors");

                    b.Navigation("DoorAdvanceConfiguration")
                        .IsRequired();

                    b.Navigation("DoorGroupDoors");

                    b.Navigation("Readers");

                    b.Navigation("Rexes");
                });

            modelBuilder.Entity("Domain.Models.ControllerModels.DoorModels.ReaderModels.Reader", b =>
                {
                    b.Navigation("ReaderIdentificationType");
                });

            modelBuilder.Entity("Domain.Models.DoorGroupModels.DoorGroup", b =>
                {
                    b.Navigation("DoorGroupDoors");
                });

            modelBuilder.Entity("Domain.Models.QUserModels.QUser", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("QUserAccessLevels");

                    b.Navigation("QUserFiles")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.ScheduleModels.Schedule", b =>
                {
                    b.Navigation("AccessLevelDoorExceptSchdeule");

                    b.Navigation("AccessLevelDoorSchdeule");

                    b.Navigation("AccessLevelExceptSchdeule");

                    b.Navigation("AccessLevelSchdeule");

                    b.Navigation("DoorAdvanceConfigurationForSchedule")
                        .IsRequired();

                    b.Navigation("DoorAdvanceConfigurationForUnlockSchedule")
                        .IsRequired();

                    b.Navigation("ReaderIdentificationTypeExceptSchedule")
                        .IsRequired();

                    b.Navigation("ReaderIdentificationTypeSchedule")
                        .IsRequired();

                    b.Navigation("RexDuringSchedule")
                        .IsRequired();

                    b.Navigation("RexExceptSchedule")
                        .IsRequired();

                    b.Navigation("ScheduleItems");
                });
#pragma warning restore 612, 618
        }
    }
}
